"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentUser = void 0;
var jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
// Any time a user comes into a route, with currentUser middleware being
// applied, this function will...
function currentUser(req, res, next) {
    var _a;
    // Check if user is logged in
    // If user doesn't have 'req.session.jwt' set or JWT is invalid,
    // continue on, in which case, currentUser is undefined
    if (!((_a = req.session) === null || _a === void 0 ? void 0 : _a.jwt)) {
        return next();
    }
    // If user has JWT, verify/decode and set to payload
    // Set it on currentUser so it can be used by other middlewares
    // or the actual request handler
    try {
        // jwt.verify(token,secretOrPrivateKey,[options,callback])
        var payload = jsonwebtoken_1.default.verify(req.session.jwt, process.env.JWT_KEY);
        req.currentUser = payload;
    }
    catch (err) { }
    // If JWT has been tampered with, verify() will throw an error
    // This try-catch-block will be used to catch that possible error
    next();
}
exports.currentUser = currentUser;
